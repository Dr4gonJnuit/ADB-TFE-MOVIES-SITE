Project ADB_TFE_SERIES_SITE {
  database_type: "MySQL"
  Note: "Travail de fin d'année pour la 1ère année d\'étude à l'IFAPME à Charleroi pour le cours d\'atelier de développement - base."
}

// Ces tables se remplissent dès que l'utilisateur fait une recherche d'une série pas encore dans la base de données.
// On fait d'abord une recherche dans la DB pour afficher les infos,
// si rien n'est présent on demande à l'API de montrer les infos de la série et puis on les stocke dans la DB.

// Ces tables se remplissent dès que l'utilisateur fait une recherche d'une série pas encore dans la base de données.
// On fait d'abord une recherche dans la DB pour afficher les infos,
// si rien n'est présent on demande à l'API de montrer les infos de la série et puis on les stocke dans la DB.

Table Series {
  serie_id int(10) [pk]
  title varchar(255) [not null, note: "Titre de la série"]
  release_date date
  description text [not null, note: "Description de la série"]
  image varchar(255) [not null, note: "URL de l'image de la série, a besoin de la base de l'URL de l'API pour fct"]
}

Table Seasons {
  id int(10) [pk, increment]
  serie_id int(10) [not null, ref: > Series.serie_id]
  season_number int(10) [not null, note: "Numéro de la saison"]
  image varchar(255) [note: "URL de l'image de la saison, a besoin de la base de l'URL de l'API pour fct"]
}

Table Episodes {
  id int(10) [pk, increment]
  season_id int(10) [not null, ref: > Seasons.id]
  episode_number int(10) [not null, note: "Numéro de l'épisode"]
  title varchar(255) [not null, note: "Titre de l'épisode"]
  description text [not null, note: "Description de l'épisode"]
  image varchar(255) [note: "URL de l'image de l'épisode, a besoin de la base de l'URL de l'API pour fct"]
}

Table Genders {
  gender_id int(10) [pk]
  name varchar(255) [not null, note: "Nom du genre"]
}

Table SeriesGenders {
  serie_id int(10) [not null, ref: > Series.serie_id]
  gender_id int(10) [not null, ref: > Genders.gender_id]
}

Table Actors {
  actor_id int(10) [pk]
  name varchar(255) [not null, note: "Nom de l'acteur"]
  image varchar(255) [note: "URL de l'image de l'acteur, a besoin de la base de l'URL de l'API pour fct"]
}

Table SeriesActors {
  serie_id int(10) [not null, ref: > Series.serie_id]
  actor_id int(10) [not null, ref: > Actors.actor_id]
}

//////////////////////////////////////////////////////////////////////////////////
  serie_id int(10) [pk]
  title varchar(255) [not null, note: "Titre de la série"]
  description text [not null, note: "Description de la série"]
  image varchar(255) [not null, note: "URL de l'image de la série"]
}

Table Seasons {
  id int(10) [pk, increment]
  serie_id int(10) [not null, ref: > Series.serie_id]
  season_number int(10) [not null, note: "Numéro de la saison"]
  title varchar(255) [not null, note: "Titre de la saison"]
  description text [not null, note: "Description de la saison"]
  image varchar(255) [not null, note: "URL de l'image de la saison"]
}

Table Episodes {
  id int(10) [pk, increment]
  season_id int(10) [not null, ref: > Seasons.id]
  episode_number int(10) [not null, note: "Numéro de l'épisode"]
  title varchar(255) [not null, note: "Titre de l'épisode"]
  description text [not null, note: "Description de l'épisode"]
  image varchar(255) [not null, note: "URL de l'image de l'épisode"]
}

Table Genders {
  gender_id int(10) [pk]
  name varchar(255) [not null, note: "Nom du genre"]
}

Table SeriesGenders {
  serie_id int(10) [not null, ref: > Series.serie_id]
  gender_id int(10) [not null, ref: > Genders.gender_id]
}

Table Actors {
  actor_id int(10) [pk]
  name varchar(255) [not null, note: "Nom de l'acteur"]
  image varchar(255) [not null, note: "URL de l'image de l'acteur"]
}

Table SeriesActors {
  serie_id int(10) [not null, ref: > Series.serie_id]
  actor_id int(10) [not null, ref: > Actors.actor_id]
}

//////////////////////////////////////////////////////////////////////////////////

Table Users {
  user_id bigint(20) [pk, increment, note: "unsigned"]
  name varchar(255) [not null, note: "Nom d'utilisateur"]
  first_name varchar(255) [default: null, note: "Prénom de l'utilisateur"]
  last_name varchar(255) [default: null, note: "Nom de famille de l'utilisateur"]
  gender Genders [default: null, note: "Genre de l'utilisateur"]
  birthdate date [note: "Date de naissance au format YYYY-MM-DD"]
  country varchar(50) [note: "Pays d'origine de l'utilisateur"]
  email varchar(255) [not null, unique]
  email_verified_at timestamp [default: null]
  password varchar(255) [not null, note: "hashed password"]
  remember_token varchar(100) [default: null]
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamp [default: null]
}

Table Comments {
  id bigint(20) [pk, increment, note: "unsigned"]
  user_id bigint(20) [not null, ref: > Users.user_id, note: "unsigned"]
  serie_id int(10) [not null, ref: > Series.serie_id]
  comment text [not null]
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamp [default: null]
  deleted_at timestamp [default: null]

  indexes {
    (user_id, serie_id) [unique]
  }

}

Table Statistiques {
  id int(10) [pk, increment]
  user_id bigint(20) [not null, ref: > Users.user_id, note: "unsigned"]
}

Table Favorites {
  user_id bigint(20) [pk, not null, ref: > Users.user_id, note: "unsigned"]
  serie_id int(10) [pk, not null, ref: > Series.serie_id]

  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  deleted_at timestamp [default: null]
}

Table WatchList {
  user_id bigint(20) [pk, not null, ref: > Users.user_id, note: "unsigned"]
  serie_id int(10) [pk, not null, ref: > Series.serie_id]

  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  deleted_at timestamp [default: null]
}

Table Watched {
  id int(10) [pk, increment]
  user_id bigint(20) [not null, ref: > Users.user_id, note: "unsigned"]
  episode_id int(10) [not null, ref: > Episodes.id]

  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  deleted_at timestamp [default: null]
}

Table Ratings {
  user_id bigint(20) [pk, not null, ref: > Users.user_id, note: "unsigned"]
  serie_id int(10) [pk, not null, ref: > Series.serie_id]
  rating int(11) [not null]

  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamp [default: null]
  deleted_at timestamp [default: null]
}

Table Sessions {
  id varchar(255) [pk]
  user_id bigint(20) [default: null, ref: > Users.user_id, note: "unsigned"]
  ip_address varchar(45) [default: null]
  user_agent text [default: null]
  payload longtext [not null]
  last_activity int(11) [not null]
}

// Tables used for Laravel

Table Password_Reset_Tokens {
  email varchar(255) [pk]
  token varchar(255) [not null]
  created_at timestamp [default: null]
}

Table Migrations {
  id int(10) [pk, increment, note: "unsigned"]
  migration varchar(255) [not null]
  batch int(11) [not null]
}

Table Jobs {
  id bigint(20) [pk, increment, note: "unsigned"]
  queue varchar(255) [not null]
  payload longtext [not null]
  attempts tinyint(3) [not null, note: "unsigned"]
  reserved_at int(10) [default: null, note: "unsigned"]
  available_at int(10) [not null, note: "unsigned"]
  created_at int(10) [not null, note: "unsigned"]
}

Table Jobs_Batches {
  id varchar(255) [pk]
  name varchar(255) [not null]
  total_jobs int(11) [not null]
  pending_jobs int(11) [not null]
  failed_jobs int(11) [not null]
  failed_jobs_ids longtext [not null]
  options mediumtext [default: null]
  canceled_at int(11) [default: null]
  created_at int(11) [not null]
  finished_at int(11) [default: null]
}

Table Failed_Jobs {
  id bigint(20) [pk, increment, note: "unsigned"]
  uuid varchar(255) [not null, unique]
  connection text [not null]
  queue text [not null]
  payload longtext [not null]
  exception longtext [not null]
  failed_at timestamp [default: `CURRENT_TIMESTAMP`]
}

Table Cache_Locks {
  key varchar(255) [pk]
  owner varchar(255) [not null]
  expiration int(11) [not null]
}

Table Cache {
  key varchar(255) [pk]
  value mediumtext [not null]
  expiration int(11) [not null]
}

Enum Genders {
  "Homme"
  "Femme"
  "Autre"
}
